@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using QuipClash.Server.Hubs;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<style>
	ol.leaderboard {
		list-style: upper-roman;
	}
</style>

<div class="menu" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Menu)">
	<form>
		<p>Username</p>
		<input type="text" maxlength="32" placeholder="epic_username_69" @bind-value="username" />
		<br />
		<br />
		<input type="text" maxlength="4" @bind-value="gameIDInput" />
		<input type="button" value="Join hub" disabled="@(username == "" || gameIDInput.Length != 4 || !QuipClashHub.ActiveGames.ContainsKey(gameIDInput))" @onclick="JoinGame" />
		<br />
		<br />
		<input type="button" value="Create hub" @onclick="CreateGame" />
	</form>
</div>
<div class="lobby" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Lobby)">
	@if (QuipClashHub.ActiveGames.Count > 0 && gameID != "")
	{
		<p>Game ID: @gameID</p>
		<ul>
			@foreach (PlayerInfo _info in QuipClashHub.ActiveGames[gameID].players.Values)
			{
				<PlayerListItem Username="@_info.username" IsPartyLeader="@_info.isPartyLeader" />
			}
		</ul>
		//why doesn't this work????????? It's disabled even when I have 3 players
		<button hidden="@(!isPartyLeader)" disabled="@QuipClashHub.ActiveGames[gameID].players.Count < 3" @onclick="StartGame">Start game</button>
	}
</div>
<div class="game" hidden="@(currentPlayerState == PlayerInfo.PlayerState.Lobby)">
	<div class="responding" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Responding)">
		<form @onsubmit="SendResponse">
			<p><b>@currentPrompt</b></p>
			<input type="text" maxlength="64" @bind-value="responseInput" />
		</form>
	</div>
	<div class="waiting" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Waiting)">

	</div>
	<div class="voting" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Voting)">
		<p><b>@currentPrompt</b></p>
		@if (currentResponses != null)
		{
			foreach (ResponseInfo _response in currentResponses)
			{
				<button @onclick="async() => await SendVote(_response.optionNumber)">@_response.response</button>
			}
		}
	</div>
	<div class="voting" hidden="@(currentPlayerState != PlayerInfo.PlayerState.EndGame)">
		<ol class="leaderboard">
			@if (currentLeaderboard != null)
			{
				@for (int i = 0; i < 3; i++)
				{
					<PlayerListItem Username="@currentLeaderboard[i].username" IsPartyLeader="@currentLeaderboard[i].isPartyLeader" />
				}
			}
		</ol>
		<button @onclick="() => UpdatePlayerState(PlayerInfo.PlayerState.Menu)">Return to menu</button>
	</div>
</div>

@code {
	//UI variables
	string gameIDInput = "";
	string responseInput = "";

	//game variables
	string gameID = "";
	string username = "";
	bool isPartyLeader = false;

	string currentPrompt;
	int currentDuelIndex;
	List<ResponseInfo> currentResponses;
	List<PlayerInfo> currentLeaderboard;
	PlayerInfo.PlayerState currentPlayerState;

	HubConnection hubConnection;

	protected override async Task OnInitializedAsync()
	{
		//creates the hub connection
		hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri($"/quipclashhub"))
			.Build();

		//adds handlers
		hubConnection.On<string>("CompleteCreateGame", async (g) => await CompleteCreateGame(g));
		hubConnection.On<string, List<ResponseInfo>>("ReceiveResponses", (p, r) => ReceiveResponses(p, r));
		hubConnection.On<string, int>("BeginRespond", (p, d) => BeginRespond(p, d));
		hubConnection.On<PlayerInfo.PlayerState>("UpdatePlayerState", (s) => UpdatePlayerState(s));
		hubConnection.On<List<PlayerInfo>>("GameEnded", (l) => GameEnded(l));
		hubConnection.On("UpdateUI", () => StateHasChanged());

		//initiates the connection
		await hubConnection.StartAsync();

		//brings you to the menu
		UpdatePlayerState(PlayerInfo.PlayerState.Menu);
	}

	// outbound logic //

	async Task JoinGame()
	{
		gameID = gameIDInput;

		await hubConnection.SendAsync("RegisterPlayer", gameID, username);

		UpdatePlayerState(PlayerInfo.PlayerState.Lobby);
	}

	async Task CreateGame()
	{
		isPartyLeader = true;
		await hubConnection.SendAsync("CreateGame");
	}

	async Task StartGame()
	{
		await hubConnection.SendAsync("StartGame", gameID);
	}

	async Task SendResponse()
	{
		await hubConnection.SendAsync("SendResponse", gameID, responseInput, currentDuelIndex);

		UpdatePlayerState(PlayerInfo.PlayerState.Waiting);
	}

	async Task SendVote(int voteOption)
	{
		await hubConnection.SendAsync("SendVote", gameID, voteOption);

		UpdatePlayerState(PlayerInfo.PlayerState.Waiting);
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection != null)
		{
			await hubConnection.SendAsync("RemovePlayer", gameID);
			await hubConnection.DisposeAsync();
		}
	}

	// inbound logic //

	public async Task CompleteCreateGame(string _gameID)
	{
		gameIDInput = _gameID;
		await JoinGame();
	}

	public void BeginRespond(string prompt, int duelIndex)
	{
		currentPrompt = prompt;
		currentDuelIndex = duelIndex;

		UpdatePlayerState(PlayerInfo.PlayerState.Responding);

		StateHasChanged();
	}

	public void ReceiveResponses(string prompt, List<ResponseInfo> responses)
	{
		currentPrompt = prompt;
		currentResponses = responses;
	}

	public void GameEnded(List<PlayerInfo> leaderboard)
	{
		currentLeaderboard = leaderboard;
	}

	public void UpdatePlayerState(PlayerInfo.PlayerState state)
	{
		currentPlayerState = state;

		StateHasChanged();
	}
}