@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using QuipClash.Server.Hubs;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@implements IDisposable

<style>
	* {
		color: #2d232e;
		font-size: 24px;
		font-family: sans-serif;
	}

	body {
		background-color: #30bced;
	}

	p {
		margin: 0;
	}

		p.centered, h2.centered, h3.centered {
			width: 100%;
			text-align: center;
		}

		p.game-id-display {
			font-weight: bold;
		}

	.element-container {
		margin: 0;
		padding: 0;
		width: 100%;
		height: 100%;
	}

	div.centered {
		height: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	form.center-content {
		display: flex;
		flex-direction: column;
		align-content: center;
	}

	.lobby, .leaderboard {
		padding: 18px;
		width: 48vw;
		height: fit-content;
		border: dashed;
		border-color: #f7d43b;
		background-color: white;
		display: flex;
		flex-direction: column;
		align-content: center;
	}

	ul, ol {
		padding: 14px;
		border-radius: 4px;
		background-color: lightgray;
		list-style: none;
		overflow: hidden;
	}

	ol {
		list-style: upper-roman;
	}

	input[type=text] {
		margin-bottom: 8px;
		background-color: white;
		border: dashed;
		border-color: #f7d53c;
	}

		input[type=text]:scope {
			border: dashed;
			border-color: #f7d53c;
		}

	input[type=button], button {
		padding: 4px;
		border-radius: 2px;
		border-color: #f7d43b;
		font-weight: bold;
		border: none;
		background-color: #f7d43b;
		margin-bottom: 5px;
	}

		input[type=button]:disabled, button:disabled {
			border-color: #c4a108;
			background-color: #c4a108;
		}

		button.cancel {
			margin-right: 5px;
			width: 50%;
			background-color: #e34543;
		}

	h1 {
		margin: 0;
		font-family: 'Fredoka One';
		font-size: 128px;
		color: #f7d53c;
		-webkit-text-stroke-width: 2px;
		-webkit-text-stroke-color: black;
	}

	h2 {
		margin: 0;
		font-family: 'Fredoka One';
		font-size: 56px;
		color: #f7d53c;
		-webkit-text-stroke-width: 2px;
		-webkit-text-stroke-color: black;
	}

	h3 {
		font-size: 24px;
		font-weight: bold;
	}

	.title-underline {
		margin-top: -16px;
		width: 713px;
		height: 17px;
		border-radius: 7px;
		border-width: 7px;
		background-color: #e34543;
	}

	div.align-content-horizontal {
		display: flex;
		flex-direction: row;
	}
</style>

<div class="element-container" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Menu)">
	<div class="centered">
		<h1 class="title">QUIPCLASH</h1>
		<div class="title-underline" />
		<br />
		<form>
			<input type="text" maxlength="32" placeholder="Username" @bind-value="username" />
			<br />
			<input type="text" maxlength="4" placeholder="Game ID" @bind-value="gameIDInput" />
			<br />
			<input type="button" value="Join game" disabled="@(username == "" || !QuipClashHub.ActiveGames.ContainsKey(gameIDInput.ToLower()))" @onclick="JoinGame" />
			<input style="float:right;" type="button" value="Create game" disabled="@(username == "")" @onclick="CreateGame" />
		</form>
	</div>
</div>
<div class="element-container" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Lobby)">
	@if (QuipClashHub.ActiveGames.Count > 0 && gameID != "")
	{
		<div class="centered">
			<div class="lobby">
				<h2 style="color: #e34543;" class="centered">Lobby</h2>
				<p class="centered game-id-display"><b>Game ID: <span style="color: #e34543">@gameID.ToUpper()</span></b></p>
				<ul>
					@foreach (PlayerInfo _info in QuipClashHub.ActiveGames[gameID].players.Values)
					{
						<PlayerListItem Username="@_info.username" MascottIndex="@_info.mascottNumber" />
					}
				</ul>
				<div class="align-content-horizontal">
					@if (isPartyLeader)
					{
						<button class="cancel" @onclick="LeaveGame">Cancel game</button>
					}
					else
					{
						<button class="cancel" style="float:right;" @onclick="LeaveGame">Leave game</button>
					}
					<button style="width: 50%; margin-left: 5px; " hidden="@(!isPartyLeader)" disabled="@(QuipClashHub.ActiveGames[gameID].players.Count < 3)" @onclick="StartGame">Start game</button>
				</div>
			</div>
		</div>
	}
</div>
<div class="element-container" hidden="@(currentPlayerState == PlayerInfo.PlayerState.Lobby || currentPlayerState == PlayerInfo.PlayerState.Menu)">
	<div class="centered" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Responding)">
		<form class="center-content" @onsubmit="SendResponse">
			<h2>@currentPrompt</h2>
			<input type="text" maxlength="64" @bind-value="responseInput" />
		</form>
	</div>
	<div class="centered" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Waiting)">
		<h1>Please wait</h1>
		<div class="title-underline" />
		@if (QuipClashHub.ActiveGames.Count > 0 && gameID != "" && QuipClashHub.ActiveGames[gameID].rounds.Count > 0)
		{
			<h2 style="margin-top:10px;">You are waiting for @(QuipClashHub.ActiveGames[gameID].rounds[QuipClashHub.ActiveGames[gameID].roundIndex].waitingForCount) other players</h2>
		}
	</div>
	<div class="centered" hidden="@(currentPlayerState != PlayerInfo.PlayerState.Voting)">
		<h2>@currentPrompt</h2>
		@if (currentResponses != null)
		{
			<div class="align-content-horizontal">
				@foreach (ResponseInfo _response in currentResponses)
				{
					<ResponseVoteOption Disabled="@(!isVoting)" OnClick="async() => await SendVote(_response.optionNumber)" Votes="_response.votes">@_response.response</ResponseVoteOption>
				}
			</div>
		}
	</div>
	<div class="centered" hidden="@(currentPlayerState != PlayerInfo.PlayerState.EndGame)">
		<div class="leaderboard">
			<h2 style="color: #e34543;" class="centered">Leaderboard</h2>
			@if (currentLeaderboard != null)
			{
				<h3 class="centered">You placed #@currentLeaderboard.IndexOf(currentLeaderboard.Find(p => p.username == username))</h3>
				<ol>
					@for (int i = 0; i < 3; i++)
					{
						var _info = currentLeaderboard[i];
						<PlayerListItem Username="@_info.username" MascottIndex="@_info.mascottNumber" />
					}
				</ol>
			}
			<button @onclick="() => UpdatePlayerState(PlayerInfo.PlayerState.Menu)">Return to menu</button>
		</div>
	</div>
</div>

@code {
	//local variables
	string gameIDInput = "";
	string responseInput = "";

	readonly int mascottCount = 7;

	//game variables
	string gameID = "";
	string username = "";
	bool isPartyLeader = false;

	string currentPrompt;
	int currentDuelIndex;
	List<ResponseInfo> currentResponses;
	bool isVoting;
	List<PlayerInfo> currentLeaderboard;
	int currentPlacing;
	PlayerInfo.PlayerState currentPlayerState;

	HubConnection hubConnection;

	protected override async Task OnInitializedAsync()
	{
		//creates the hub connection
		hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri($"/quipclashhub"))
			.Build();

		//adds handlers
		hubConnection.On<string>("CompleteCreateGame", async (g) => await CompleteCreateGame(g));
		hubConnection.On<string, List<ResponseInfo>, bool>("BeginVote", (p, r, i) => BeginVote(p, r, i));
		hubConnection.On<int>("UpdateVote", (v) => UpdateVote(v));
		hubConnection.On<string, int>("BeginRespond", (p, d) => BeginRespond(p, d));
		hubConnection.On<PlayerInfo.PlayerState>("UpdatePlayerState", (s) => UpdatePlayerState(s));
		hubConnection.On<List<PlayerInfo>>("GameEnded", (l) => GameEnded(l));
		hubConnection.On("UpdateUI", StateHasChanged);

		//initiates the connection
		await hubConnection.StartAsync();

		//brings you to the menu
		UpdatePlayerState(PlayerInfo.PlayerState.Menu);
	}

	// outbound logic //

	async Task JoinGame()
	{
		gameID = gameIDInput.ToLower();

		var random = new Random();
		await hubConnection.SendAsync("RegisterPlayer", gameID, username, random.Next(1, mascottCount));
	}

	async Task LeaveGame()
	{
		await hubConnection.SendAsync("RemovePlayer", gameID);
	}

	async Task CreateGame()
	{
		isPartyLeader = true;
		await hubConnection.SendAsync("CreateGame");
	}

	async Task StartGame()
	{
		await hubConnection.SendAsync("StartGame", gameID);
	}

	async Task SendResponse()
	{
		await hubConnection.SendAsync("SendResponse", gameID, responseInput, currentDuelIndex);

		UpdatePlayerState(PlayerInfo.PlayerState.Waiting);
	}

	async Task SendVote(int voteOption)
	{
		await hubConnection.SendAsync("SendVote", gameID, voteOption);

		isVoting = false;

		StateHasChanged();
	}

	public void Dispose()
	{
		hubConnection.DisposeAsync();
	}
	public async ValueTask DisposeAsync()
	{
		await hubConnection.DisposeAsync();
	}

	// inbound logic //

	public async Task CompleteCreateGame(string _gameID)
	{
		gameIDInput = _gameID;
		await JoinGame();
	}

	public void BeginRespond(string prompt, int duelIndex)
	{
		currentPrompt = prompt;
		currentDuelIndex = duelIndex;

		UpdatePlayerState(PlayerInfo.PlayerState.Responding);

		//do timer stuff here
	}

	public void BeginVote(string prompt, List<ResponseInfo> responses, bool isVoter)
	{
		currentPrompt = prompt;
		currentResponses = responses;
		isVoting = isVoter;

		//do timer stuff here
	}

	public void UpdateVote(int voteOption)
	{
		currentResponses[voteOption].votes++;

		StateHasChanged();
	}

	public void GameEnded(List<PlayerInfo> leaderboard)
	{
		currentLeaderboard = leaderboard;
	}

	public void UpdatePlayerState(PlayerInfo.PlayerState state)
	{
		currentPlayerState = state;

		StateHasChanged();
	}
}